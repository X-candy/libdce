var Startup = xdc.useModule('xdc.runtime.Startup');
var Program = xdc.useModule('xdc.cfg.Program');

Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = true;

var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
m3Hwi.enableWA1_1 = false;
Program.global.cacheMode        = "WA_DISABLED"; // from XDCARGS, this flag won't be defined.
//Set Core ID for the processor
var Core            = xdc.useModule('ti.sysbios.family.arm.ducati.Core'); 
Core.id             = 1; 

var GateMutexPri    = xdc.useModule('ti.sysbios.gates.GateMutexPri');
var params          = new GateMutexPri.Params; 
 
Program.stack       = 0x800;
Program.global.gOSALgate        = GateMutexPri.create(params); 
Program.global.coreName         = "app_m3";
Program.global.targetBuild      = "BUILD_OMAP4";

Program.global.dstProcId = 2; //For SysM3   
//configure BIOS
BIOS                = xdc.useModule('ti.sysbios.BIOS');
BIOS.clockEnabled   = true;
BIOS.rtsGateType    = BIOS.GateHwi;
var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
m3Hwi.vectorTableAddress = 0x0;
m3Hwi.enableException = true;

var Exception = xdc.useModule('ti.sysbios.family.arm.m3.Exception');
Exception.doPrint = true;


//XDC runtime configuration
xdc.useModule('xdc.runtime.knl.Semaphore').Proxy = xdc.useModule('ti.sysbios.xdcruntime.SemProcessSupport'); 

/* 
* Create a static task for app M3 intialization functions
*/
var Task            = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSize = 0x4000;
var task_params     = new Task.Params;
task_params.stackSize = 0x4000;
task_params.instance.name = "Ducati_AppTask";
Task.create("&Ducati_AppTask", task_params);


Task.common$.namedInstance = true;
var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
//I2C
var hwiparams6      = new Hwi.Params;
hwiparams6.arg      = 1;

var hwiparams7      = new Hwi.Params;
hwiparams7.arg      = 2;


/* 
* Create a default system heap using ti.bios.HeapMem and plugin this as default heap
*/
var Memory          = xdc.useModule('xdc.runtime.Memory');
var HeapMem         = xdc.useModule('ti.sysbios.heaps.HeapMem');
var GateHwi         = xdc.useModule('ti.sysbios.gates.GateHwi');
var heapMemParams   = new HeapMem.Params;

HeapMem.common$.gate = GateHwi.create();

heapMemParams.size  = 0xBFFFEA;
heapMemParams.sectionName       = ".systemHeap";
var heap0           = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance      = heap0;
Program.global.heap0  =heap0;
/*
/* Heap For Video Components */
var HeapMemVideo         = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParamsVideo   = new HeapMemVideo.Params;

heapMemParamsVideo.size  = 0x1CDFFEA;
heapMemParamsVideo.sectionName       = ".HeapVideo";
var heapvideo           = HeapMem.create(heapMemParamsVideo);
Program.global.heap1  = heapvideo;

/* 
* Do section mapping to memory regions
*/
Program.sectMap["__TI_handler_table"] = "MEM_CONST_APPM3";
Program.sectMap[".data"]        = "MEM_CODE_APPM3";
Program.sectMap[".text"]        = "MEM_CODE_APPM3";
Program.sectMap[".cinit"]       = "MEM_CODE_APPM3";
Program.sectMap[".const"]       = "MEM_CONST_APPM3";
Program.sectMap[".pinit"]       = "MEM_CODE_APPM3";
Program.sectMap[".args"]        = "MEM_CODE_APPM3";
Program.sectMap[".rodata"]        = "MEM_CODE_APPM3";
Program.sectMap[".neardata"]        = "MEM_CODE_APPM3";
Program.sectMap[".bss"]         = "MEM_CODE_APPM3";
Program.sectMap[".sysmem"]      = "MEM_CONST_APPM3"; 
Program.sectMap[".HeapVideo"]      = "MEM_HEAP2_APPM3"; 
Program.sectMap[".systemHeap"]  = "MEM_HEAP1_APPM3"; 
Program.sectMap[".stack"]       = "MEM_CODE_APPM3";
Program.sectMap[".stackMemory"] = "MEM_CODE_APPM3";
Program.sectMap[".taskStackSection"] = "MEM_CODE_APPM3";
Program.sectMap["mmsdbgvarlist"]     = "MEM_CODE_APPM3";
Program.sectMap["halSubModules"]     = "MEM_CODE_APPM3";
Program.sectMap[".lens_none_ld_hdl"] = "MEM_CODE_APPM3";
Program.sectMap[".awb_scratch"] = "MEM_CODE_APPM3";
Program.sectMap["tools_log_buffer"] = "MEM_CODE_APPM3";
//codec specific memory map
Program.sectMap[".H264ENC_TI_DTCM1_STATIC_DATA"]                = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_DTCM2_STATIC_DATA"]                = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_NonDeterministicDescriptors_sect"] = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_sH264CalcTables"]                  = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_CONST_EXT_SL2_sect"]               = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_IlfMbctTabs_sect"]                 = "MEM_CODE_APPM3";
Program.sectMap[".H264VENC_TI_CabacContexts_sect"]              = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_MEFastME01BFrameAlgo_sect"]        = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_MEFastME01PFrameAlgo_sect"]        = "MEM_CODE_APPM3";
Program.sectMap[".H264ENC_TI_DTCM_sect"]                        = "MEM_CODE_APPM3";
Program.sectMap[".load_data"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6_LOAD_DATA11"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6_LOAD_DATA12"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6_LOAD_DATA21"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6_LOAD_DATA22"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6DEC_TI_dSect1"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6DEC_TI_dSect2"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP6_ilf_pstack"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP6_Ecd3LseCmdTable"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP6_Calc3LseCmdTable"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP6_Mc3LseCmdTable"]                        = "MEM_CODE_APPM3";
//Program.sectMap[".VP7_LOAD_DATA"]                        = "MEM_CONST_APPM3";
Program.sectMap[".VP7DEC_TI_dSect1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7DEC_TI_dSect2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7VDEC_STATIC_TABLE1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7VDEC_STATIC_TABLE2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7VDEC_STATIC_TABLE3"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7VDEC_STATIC_TABLE4"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7VDEC_STATIC_TABLE5"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA1_1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA1_2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA1_3"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA1_4"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA2_1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA2_2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".VP7_LOAD_DATA2_3"]                        = "MEM_CODE_APPM3";

Program.sectMap[".MPEG4VENC_TI_ICONT1_DataSect0"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT1_DataSect1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT1_DataSect2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT2_DataSect0"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT2_DataSect1"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT2_DataSect2"]                        = "MEM_CODE_APPM3";
Program.sectMap[".MPEG4VENC_TI_ICONT2_DataSect3"]                        = "MEM_CODE_APPM3";
Program.sectMap[".text: { *<copy*>(.text) }"] = "MEM_CODE_APPM3";

Program.sectMap[".load_data1"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_data2"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_data3"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_data4"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_data5"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_data6"]                        = "MEM_CONST_APPM3";
Program.sectMap[".load_static_tbls"]                  = "MEM_CONST_APPM3";

//Program.sectMap[".Ipc_ToHostConfig"] = {loadSegment: "MEM_IPC_SHMEM"};


var GateMutex     = xdc.useModule('ti.sysbios.gates.GateMutex');
var GateMP        = xdc.useModule('ti.sdo.ipc.GateMP');
xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

// configuring multiproc module
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("AppM3", ["Tesla", "AppM3", "SysM3", "MPU"]);

var Ipc           = xdc.useModule('ti.sdo.ipc.Ipc');
Ipc.procSync = Ipc.ProcSync_PAIR;
/* Settings for Ipc synchronization */
for (var i=0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
    });
}

var InterruptDucati = xdc.useModule('ti.sdo.ipc.family.omap4430.InterruptDucati');
InterruptDucati.ducatiCtrlBaseAddr = 0x40001000;
InterruptDucati.mailboxBaseAddr    = 0xAA0F4000;

var GateHWSpinLock  = xdc.useModule('ti.sdo.ipc.gates.GateHWSpinlock');
GateHWSpinLock.baseAddr            = 0xAA0F6800;

var Notify        = xdc.useModule('ti.sdo.ipc.Notify');
Notify.numEvents = 32;

var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');

var Deh = xdc.useModule('ti.omap.deh.Deh');

/* IPC Shared Memory Map */
Program.global.SHAREDMEM           = 0xA0000000;
Program.global.SHAREDMEMSIZE       = 0x54000;

SharedRegion.setEntryMeta(0,
    { base: Program.global.SHAREDMEM,
      len: Program.global.SHAREDMEMSIZE,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      name: "ipc_shm",
    });
    
Program.global.SHAREDMEM2          = 0xA0054000;
Program.global.SHAREDMEMSIZE2      = 0x000AC000;

SharedRegion.setEntryMeta(1,
    { base: Program.global.SHAREDMEM2,
      len: Program.global.SHAREDMEMSIZE2,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      createHeap: true,
      name: "ipc_shm2",
    });

var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.numHeaps = 2;

var RcmServer = xdc.useModule('ti.sdo.rcm.RcmServer');
var RCM = xdc.useModule('ti.sdo.rcm.RcmClient'); //APP CLIENT 
Program.global.dstProcId = 2;

/* specify which ipc layer to use */
var Settings = xdc.useModule('ti.sdo.rcm.Settings');
Settings.ipc = Settings.IpcSupport_ti_sdo_ipc;

/* 
 * Trace Settings
 */

xdc.useModule('ti.sysbios.xdcruntime.Settings');
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
/* LoggerSys uses System_printf for routing log events */
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();

var Diags = xdc.useModule('xdc.runtime.Diags');
var Main = xdc.useModule('xdc.runtime.Main');
var debug = false;  // change this to get traces..
if (debug) {
	Defaults.common$.diags_ENTRY     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_EXIT      = Diags.RUNTIME_OFF;
	Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
	Defaults.common$.diags_INTERNAL  = Diags.RUNTIME_ON;  // needed for asserts
	Defaults.common$.diags_ASSERT    = Diags.RUNTIME_ON;  // development only
	Defaults.common$.diags_STATUS    = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER1     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER2     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER3     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER4     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER5     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_USER6     = Diags.RUNTIME_OFF;
	Defaults.common$.diags_INFO      = Diags.RUNTIME_OFF;
	Defaults.common$.diags_ANALYSIS  = Diags.RUNTIME_OFF;
	/* default buffer size isn't big enough if we are
	 * enabling some debug traces
	 */
	SysMin.bufSize = 40960;
}
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);
System.SupportProxy = SysMin;
/* this hooks up System_printf() to syslink trace daemon..
 * note that even though we aren't using the uart, the
 * SysMinToTraceBuffer fxns are in the UART driver.. :-/
 */
xdc.useModule('ti.omap.uart.Uartdrv');
SysMin.outputFxn = "&SysMinToTraceBuffer_copy";
Startup.firstFxns.$add("&SysMinToTraceBuffer_init");


/* create the semaphore (event) used by the server application */
var Semaphore     = xdc.useModule('ti.sysbios.ipc.Semaphore');
Semaphore.supportsEvents = true;
var params = new Semaphore.Params;
Program.global.semaphore = Semaphore.create(0, params);

if (Program.build.target.name == "M3") {
    var Cache = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
}

/* *******************************DOMX CHANGES END ******************************* */

/*
 *  ======== CODEC ENGINE configurations  ========
 */
xdc.useModule('ti.sysbios.ipc.Event');
xdc.useModule('ti.sysbios.ipc.Mailbox');

var Global = xdc.useModule('ti.sdo.ce.osal.Global'); 
//Global.os = xdc.useModule('ti.sdo.ce.osal.bios.Settings');
Global.runtimeEnv = Global.DSPBIOS;

xdc.useModule('ti.sdo.ce.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.ce.video').profile            = "debug";
xdc.loadPackage('ti.sdo.ce.video3').profile           = "debug";
xdc.loadPackage('ti.sdo.ce.alg').profile              = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.fc.rman').profile             = "debug";
xdc.loadPackage('ti.sdo.fc.ires.hdvicp').profile      = "debug";
xdc.loadPackage('ti.sdo.fc.ires.tiledmemory').profile = "debug";

var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
// set to true to enable debugging of codec engine
xdc.useModule('ti.sdo.ce.Settings').checked         = true;

// Set up gt trace defaults
var gtinfra         = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
gtinfra.runtimeEnv  = gtinfra.NONE;
var gt              = xdc.useModule("ti.sdo.utils.trace.GT");
gt.MALLOCFXN        = "myMalloc";
gt.PRINTFXN         = "printfCaller"

var param1      = new GateMutexPri.Params; 

//set All heaps of dskts as the default heap0
var DSKT2           = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0    = "heap0";
DSKT2.DARAM1    = "heap0";
DSKT2.DARAM2    = "heap0";
DSKT2.SARAM0    = "heap0";
DSKT2.SARAM1    = "heap0";
DSKT2.SARAM2    = "heap0";
DSKT2.ESDATA    = "heap0";
DSKT2.IPROG     = "heap0";
DSKT2.EPROG     = "heap0";
DSKT2.DSKT2_HEAP     = "heap0";


var HDVICP2                      = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');
HDVICP2.memoryBaseAddress[0]     = 0xBB000000;
HDVICP2.registerBaseAddress[0]   = 0xBA000000;
HDVICP2.resetControlAddress[0]   = 0xAA306F10;
HDVICP2.resetFxn                 = "HDVICP_Reset";

var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
//RMAN.common$.gate = GateMutexPri.create(param1);

// 
var HDVICP20API = xdc.useModule('ti.sdo.codecs.hdvicp20api.HDVICP20API');


// load whatever codecs are available in the build
var codecs = [];

function loadCodec(pkg, name)
{
	try {
		var codec = xdc.useModule(pkg);
		print('loading: ' + name);
		codecs.push({ name: name, mod: codec, local: true });
	} catch(e) {
		print('no package: ' + pkg);
	}
}

loadCodec('ti.sdo.codecs.h264dec.ce.H264DEC', 'ivahd_h264dec');
loadCodec('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC', 'ivahd_mpeg4dec');
loadCodec('ti.sdo.codecs.vp6dec.ce.VP6DEC', 'ivahd_vp6dec');
loadCodec('ti.sdo.codecs.vp7dec.ce.VP7DEC', 'ivahd_vp7dec');
loadCodec('ti.sdo.codecs.vc1vdec.ce.VC1VDEC', 'ivahd_vc1vdec');
loadCodec('ti.sdo.codecs.realvdec.ce.REALVDEC', 'ivahd_realvdec');
loadCodec('ti.sdo.codecs.mpeg2vdec.ce.MPEG2VDEC', 'ivahd_mpeg2vdec');

var engine         = xdc.useModule('ti.sdo.ce.Engine');
var myEngine       = engine.create("ivahd_vidsvr", codecs);

//address translation API
xdc.useModule('ti.omap.mem.SyslinkMemUtils');
var slpm       = xdc.useModule('ti.omap.slpm.slpm');

/*=========Power configuration====*/
xdc.useModule('ti.sysbios.misc.Queue');

var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = xdc.useModule("ti.sysbios.family.arm.ducati.TimestampProvider");

var dmTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
dmTimer.timerSettings[0].baseAddr = 0xA8034000;
dmTimer.timerSettings[1].baseAddr = 0xA8036000;
dmTimer.timerSettings[2].baseAddr = 0xA803E000;
dmTimer.timerSettings[3].baseAddr = 0xA8088000;

var Power = xdc.useModule('ti.sysbios.family.arm.ducati.omap4430.Power');
Power.loadSegment = "MEM_HEAP_SYSM3";
Power.sdmaRegs    = 0xAA056000; 

var Idle = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&platform_idle_processing');
/*=========Power configuration====*/

